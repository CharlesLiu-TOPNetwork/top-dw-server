<div class="echart_big_wide_div" id="{{ name }}"></div>
<script type="text/javascript">
    var myChart_ = echarts.init(document.getElementById('{{ name }}'));
    // 指定图表的配置项和数据
    var all_option_ = {
        timeline: {
            data: [
                {%- for _ts in ts_list -%}
                '{{_ts}}',
                {%- endfor -%}
            ],
            axisType: 'category',
            autoPlay: true,
            loop: false,
            playInterval: 2000,
        },
        title: {
            subtext: 'from sync table {{ name }} ',
        },
        toolbox:{
            show: true,
            feature: {
                dataZoom:{
                    yAxisIndex: "none",
                    type: "inside"
                },
                dataView: {
                    readOnly: true
                },
            },
            right:'10%'
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
            },
            formatter: function (params) {
                if (params.constructor.toString().indexOf("Array")>-1)
                {
                    var min = params[0];
                    var max = params[1];
                    var min_value = params[0].value
                    var max_value = min_value + params[1].value
                    var other_max_value = params[2].value+params[3].value
                    return max.name + '<br/>' + max.seriesName + ' : ' + min_value + ' - ' + max_value + '<br/>' + params[3].seriesName + ' : ' + params[2].value + ' - ' + other_max_value;
                }
                // timeline:
                return params.name;
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '12%',
            containLabel: true
        },
        dataZoom: [{
            type: 'slider',
            show: true, 
            xAxisIndex: [0],
            left: '4%', 
            bottom: '8%',
            start: 0,
            end: 100 
        }],
        xAxis: {
            type: 'category',
            splitLine: { show: false },
            axisLabel: {
                interval: 0,
                rotate: 45,
            },
            data:[
                {%- for _ip in ip_list -%}
                '{{ _ip }}',
                {%- endfor -%}
            ],
        },
        yAxis: {
            type: 'value'
        },
        options: [
            {% for ts,item in res_map.items() -%}
            {
                title:{text: '{{ ts }}'},
                series:[
                    {
                        name: 'helper1',
                        type: 'bar',
                        stack: 'st_self',
                        itemStyle: {
                            borderColor: 'rgba(0,0,0,0)',
                            color: 'rgba(0,0,0,0)'
                        },
                        emphasis: {
                            itemStyle: {
                                borderColor: 'rgba(0,0,0,0)',
                                color: 'rgba(0,0,0,0)'
                            }
                        },
                        data:[
                            {{ item['self_min_str'] }}
                        ]
                    },
                    {
                        name: 'self范围',
                        type: 'bar',
                        stack: 'st_self',
                        label: {
                            show: true,
                            position: 'inside'
                        },
                        data:[
                            {{ item['self_gap_str'] }}
                        ]
                    },
                    {
                        name: 'helper2',
                        type: 'bar',
                        stack: 'st_peer',
                        itemStyle: {
                            borderColor: 'rgba(0,0,0,0)',
                            color: 'rgba(0,0,0,0)'
                        },
                        emphasis: {
                            itemStyle: {
                                borderColor: 'rgba(0,0,0,0)',
                                color: 'rgba(0,0,0,0)'
                            }
                        },
                        data:[
                            {{ item['peer_min_str'] }}
                        ]
                    },
                    {
                        name: 'peer范围',
                        type: 'bar',
                        stack: 'st_peer',
                        label: {
                            show: true,
                            position: 'inside'
                        },
                        data:[
                            {{ item['peer_gap_str'] }}
                        ]
                    }
                ]
            },
            {%- endfor %}
        ],

    };

    all_option_ && myChart_.setOption(all_option_);// 基于准备好的dom，初始化 echarts 实例并绘制图表。

</script>